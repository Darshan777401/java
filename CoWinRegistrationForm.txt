import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class CoWinRegistrationForm extends JFrame implements ActionListener {
  private JTextField adharCardField, birthYearField, mobileNoField;
    private JRadioButton ageGroup18Above, ageGroup45Above;
    private JRadioButton hospitalA, hospitalB, hospitalC;
    private JRadioButton covishield, covaxin, sputnikV;
    private JRadioButton morning, afternoon, evening;

    public CoWinRegistrationForm() {
        setTitle("Co-WIN Registration");
        setSize(500, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 2, 10, 10)); // 0 rows, 2 columns

        JLabel adharCardLabel = new JLabel("AdharCard No.: ");
        adharCardField = new JTextField(20);
        panel.add(adharCardLabel);
        panel.add(adharCardField);

        JLabel birthYearLabel = new JLabel("Birth Year: ");
        birthYearField = new JTextField(20);
        panel.add(birthYearLabel);
        panel.add(birthYearField);

        JLabel mobileNoLabel = new JLabel("Mobile No.: ");
        mobileNoField = new JTextField(20);
        panel.add(mobileNoLabel);
        panel.add(mobileNoField);

        JLabel ageGroupLabel = new JLabel("Age Group: ");
        ButtonGroup ageGroupButtonGroup = new ButtonGroup();
        ageGroup18Above = new JRadioButton("18 & above");
        ageGroup45Above = new JRadioButton("45 & above");
        ageGroupButtonGroup.add(ageGroup18Above);
        ageGroupButtonGroup.add(ageGroup45Above);
        JPanel ageGroupPanel = new JPanel();
        ageGroupPanel.add(ageGroupLabel);
        ageGroupPanel.add(ageGroup18Above);
        ageGroupPanel.add(ageGroup45Above);
        panel.add(ageGroupPanel);

        JLabel hospitalLabel = new JLabel("Select Hospital: ");
        ButtonGroup hospitalButtonGroup = new ButtonGroup();
        hospitalA = new JRadioButton("Hospital A");
        hospitalB = new JRadioButton("Hospital B");
        hospitalC = new JRadioButton("Hospital C");
        hospitalButtonGroup.add(hospitalA);
        hospitalButtonGroup.add(hospitalB);
        hospitalButtonGroup.add(hospitalC);
        JPanel hospitalPanel = new JPanel();
        hospitalPanel.add(hospitalLabel);
        hospitalPanel.add(hospitalA);
        hospitalPanel.add(hospitalB);
        hospitalPanel.add(hospitalC);
        panel.add(hospitalPanel);

        JLabel vaccineLabel = new JLabel("Vaccines: ");
        ButtonGroup vaccineButtonGroup = new ButtonGroup();
        covishield = new JRadioButton("Covishield");
        covaxin = new JRadioButton("Covaxin");
        sputnikV = new JRadioButton("Sputnik V");
        vaccineButtonGroup.add(covishield);
        vaccineButtonGroup.add(covaxin);
        vaccineButtonGroup.add(sputnikV);
        JPanel vaccinePanel = new JPanel();
        vaccinePanel.add(vaccineLabel);
        vaccinePanel.add(covishield);
        vaccinePanel.add(covaxin);
        vaccinePanel.add(sputnikV);
        panel.add(vaccinePanel);

        JLabel timeSlotLabel = new JLabel("Time Slot: ");
        ButtonGroup timeSlotButtonGroup = new ButtonGroup();
        morning = new JRadioButton("Morning");
        afternoon = new JRadioButton("Afternoon");
        evening = new JRadioButton("Evening");
        timeSlotButtonGroup.add(morning);
        timeSlotButtonGroup.add(afternoon);
        timeSlotButtonGroup.add(evening);
        JPanel timeSlotPanel = new JPanel();
        timeSlotPanel.add(timeSlotLabel);
        timeSlotPanel.add(morning);
        timeSlotPanel.add(afternoon);
        timeSlotPanel.add(evening);
        panel.add(timeSlotPanel);

        JButton addButton = new JButton("ADD");
        addButton.addActionListener(this);
        panel.add(addButton);

        JButton updateButton = new JButton("UPDATE");
        updateButton.addActionListener(this);
        panel.add(updateButton);

        JButton deleteButton = new JButton("DELETE");
        deleteButton.addActionListener(this);
        panel.add(deleteButton);

        JButton viewButton = new JButton("VIEW");
        viewButton.addActionListener(this);
        panel.add(viewButton);

        JButton searchButton = new JButton("SEARCH");
        searchButton.addActionListener(this);
        panel.add(searchButton);

        add(panel);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Submit")) {
            try {
                String adharCard = adharCardField.getText();
                int birthYear = Integer.parseInt(birthYearField.getText());
                String mobileNo = mobileNoField.getText();
                
                // Validate Aadhar number
                if (!validateAadharNumber(adharCard)) {
                    throw new IllegalArgumentException("Invalid Aadhar number. Please enter a 12-digit number.");
                }

                // Validate mobile number
                if (!validateMobileNumber(mobileNo)) {
                    throw new IllegalArgumentException("Invalid mobile number. Please enter a 10-digit number.");
                }

                // Additional validation for birth year, age group, hospital, vaccine, and time slot can be added here.

                JOptionPane.showMessageDialog(this, "Registration Successful");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid input for Birth Year. Please enter a valid year.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private boolean validateAadharNumber(String adharNumber) {
        return adharNumber.matches("\\d{12}");
    }

    private boolean validateMobileNumber(String mobileNumber) {
        return mobileNumber.matches("\\d{10}");
    }

    public static void main(String[] args) {
        new CoWinRegistrationForm();
    }
}


//With buttons functionality

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class CoWinRegistrationForm extends JFrame implements ActionListener 
{
    private JTextField adharCardField, birthYearField, mobileNoField;
    private JRadioButton ageGroup18Above, ageGroup45Above;
    private JRadioButton hospitalA, hospitalB, hospitalC;
    private JRadioButton covishield, covaxin, sputnikV;
    private JRadioButton morning, afternoon, evening;
    private Connection conn;

    public CoWinRegistrationForm() {
        setTitle("Co-WIN Registration");
        setSize(500, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0, 2, 10, 10)); // 0 rows, 2 columns

        JLabel adharCardLabel = new JLabel("AdharCard No.: ");
        adharCardField = new JTextField(20);
        panel.add(adharCardLabel);
        panel.add(adharCardField);

        JLabel birthYearLabel = new JLabel("Birth Year: ");
        birthYearField = new JTextField(20);
        panel.add(birthYearLabel);
        panel.add(birthYearField);

        JLabel mobileNoLabel = new JLabel("Mobile No.: ");
        mobileNoField = new JTextField(20);
        panel.add(mobileNoLabel);
        panel.add(mobileNoField);

        JLabel ageGroupLabel = new JLabel("Age Group: ");
        ButtonGroup ageGroupButtonGroup = new ButtonGroup();
        ageGroup18Above = new JRadioButton("18 & above");
        ageGroup45Above = new JRadioButton("45 & above");
        ageGroupButtonGroup.add(ageGroup18Above);
        ageGroupButtonGroup.add(ageGroup45Above);
        JPanel ageGroupPanel = new JPanel();
        ageGroupPanel.add(ageGroupLabel);
        ageGroupPanel.add(ageGroup18Above);
        ageGroupPanel.add(ageGroup45Above);
        panel.add(ageGroupPanel);

        JLabel hospitalLabel = new JLabel("Select Hospital: ");
        ButtonGroup hospitalButtonGroup = new ButtonGroup();
        hospitalA = new JRadioButton("Hospital A");
        hospitalB = new JRadioButton("Hospital B");
        hospitalC = new JRadioButton("Hospital C");
        hospitalButtonGroup.add(hospitalA);
        hospitalButtonGroup.add(hospitalB);
        hospitalButtonGroup.add(hospitalC);
        JPanel hospitalPanel = new JPanel();
        hospitalPanel.add(hospitalLabel);
        hospitalPanel.add(hospitalA);
        hospitalPanel.add(hospitalB);
        hospitalPanel.add(hospitalC);
        panel.add(hospitalPanel);

        JLabel vaccineLabel = new JLabel("Vaccines: ");
        ButtonGroup vaccineButtonGroup = new ButtonGroup();
        covishield = new JRadioButton("Covishield");
        covaxin = new JRadioButton("Covaxin");
        sputnikV = new JRadioButton("Sputnik V");
        vaccineButtonGroup.add(covishield);
        vaccineButtonGroup.add(covaxin);
        vaccineButtonGroup.add(sputnikV);
        JPanel vaccinePanel = new JPanel();
        vaccinePanel.add(vaccineLabel);
        vaccinePanel.add(covishield);
        vaccinePanel.add(covaxin);
        vaccinePanel.add(sputnikV);
        panel.add(vaccinePanel);

        JLabel timeSlotLabel = new JLabel("Time Slot: ");
        ButtonGroup timeSlotButtonGroup = new ButtonGroup();
        morning = new JRadioButton("Morning");
        afternoon = new JRadioButton("Afternoon");
        evening = new JRadioButton("Evening");
        timeSlotButtonGroup.add(morning);
        timeSlotButtonGroup.add(afternoon);
        timeSlotButtonGroup.add(evening);
        JPanel timeSlotPanel = new JPanel();
        timeSlotPanel.add(timeSlotLabel);
        timeSlotPanel.add(morning);
        timeSlotPanel.add(afternoon);
        timeSlotPanel.add(evening);
        panel.add(timeSlotPanel);

        JButton addButton = new JButton("ADD");
        addButton.addActionListener(this);
        panel.add(addButton);

        JButton updateButton = new JButton("UPDATE");
        updateButton.addActionListener(this);
        panel.add(updateButton);

        JButton deleteButton = new JButton("DELETE");
        deleteButton.addActionListener(this);
        panel.add(deleteButton);

        JButton viewButton = new JButton("VIEW");
        viewButton.addActionListener(this);
        panel.add(viewButton);

        JButton searchButton = new JButton("SEARCH");
        searchButton.addActionListener(this);
        panel.add(searchButton);

        add(panel);
        setVisible(true);

        // Establish database connection
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:cowin.db");
            createTableIfNotExists();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to the database!", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String actionCommand = e.getActionCommand();
        switch (actionCommand) {
            case "ADD":
                addRecord();
                break;
            case "UPDATE":
                updateRecord();
                break;
            case "DELETE":
                deleteRecord();
                break;
            case "VIEW":
                viewRecords();
                break;
            case "SEARCH":
                searchRecord();
                break;
        }
    }

    private void createTableIfNotExists() throws SQLException {
        String sql = "CREATE TABLE IF NOT EXISTS registrations (" +
                "adhar_card TEXT PRIMARY KEY, " +
                "birth_year INTEGER, " +
                "mobile_no TEXT, " +
                "age_group TEXT, " +
                "hospital TEXT, " +
                "vaccine TEXT, " +
                "time_slot TEXT)";
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        }
    }

    private void addRecord() {
        String adharCard = adharCardField.getText();
        int birthYear = Integer.parseInt(birthYearField.getText());
        String mobileNo = mobileNoField.getText();
        String ageGroup = ageGroup18Above.isSelected() ? "18 & above" : "45 & above";
        String hospital = hospitalA.isSelected() ? "Hospital A" : hospitalB.isSelected() ? "Hospital B" : "Hospital C";
        String vaccine = covishield.isSelected() ? "Covishield" : covaxin.isSelected() ? "Covaxin" : "Sputnik V";
        String timeSlot = morning.isSelected() ? "Morning" : afternoon.isSelected() ? "Afternoon" : "Evening";

        try {
            PreparedStatement pstmt = conn.prepareStatement("INSERT INTO registrations(adhar_card, birth_year, mobile_no, age_group, hospital, vaccine, time_slot) VALUES (?, ?, ?, ?, ?, ?, ?)");
            pstmt.setString(1, adharCard);
            pstmt.setInt(2, birthYear);
            pstmt.setString(3, mobileNo);
            pstmt.setString(4, ageGroup);
            pstmt.setString(5, hospital);
            pstmt.setString(6, vaccine);
            pstmt.setString(7, timeSlot);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Record added successfully");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Failed to add record: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateRecord() {
        // Implement update
           try {
                String adharCard = adharCardField.getText();
                int birthYear = Integer.parseInt(birthYearField.getText());
                String mobileNo = mobileNoField.getText();
                String ageGroup = ageGroup18Above.isSelected() ? "18 & above" : "45 & above";
                String hospital = hospitalA.isSelected() ? "Hospital A" : (hospitalB.isSelected() ? "Hospital B" : "Hospital C");
                String vaccine = covishield.isSelected() ? "Covishield" : (covaxin.isSelected() ? "Covaxin" : "Sputnik V");
                String timeSlot = morning.isSelected() ? "Morning" : (afternoon.isSelected() ? "Afternoon" : "Evening");
        
                PreparedStatement pstmt = conn.prepareStatement("UPDATE registrations SET birth_year=?, mobile_no=?, age_group=?, hospital=?, vaccine=?, time_slot=? WHERE adhar_card=?");
                pstmt.setInt(1, birthYear);
                pstmt.setString(2, mobileNo);
                pstmt.setString(3, ageGroup);
                pstmt.setString(4, hospital);
                pstmt.setString(5, vaccine);
                pstmt.setString(6, timeSlot);
                pstmt.setString(7, adharCard);
                int rowsUpdated = pstmt.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Record updated successfully");
                } else {
                    JOptionPane.showMessageDialog(this, "Record with AdharCard " + adharCard + " not found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Failed to update record: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        private void deleteRecord() {
            try {
                String adharCard = adharCardField.getText();
                PreparedStatement pstmt = conn.prepareStatement("DELETE FROM registrations WHERE adhar_card=?");
                pstmt.setString(1, adharCard);
                int rowsDeleted = pstmt.executeUpdate();
                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Record deleted successfully");
                } else {
                    JOptionPane.showMessageDialog(this, "Record with AdharCard " + adharCard + " not found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Failed to delete record: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        private void viewRecords() {
            try {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM registrations");
                StringBuilder result = new StringBuilder("AdharCard\tBirthYear\tMobileNo\tAgeGroup\tHospital\tVaccine\tTimeSlot\n");
                while (rs.next()) {
                    result.append(rs.getString("adhar_card")).append("\t").append(rs.getInt("birth_year")).append("\t").append(rs.getString("mobile_no")).append("\t")
                            .append(rs.getString("age_group")).append("\t").append(rs.getString("hospital")).append("\t").append(rs.getString("vaccine")).append("\t")
                            .append(rs.getString("time_slot")).append("\n");
                }
                JOptionPane.showMessageDialog(this, result.toString());
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Failed to fetch records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        private void searchRecord() {
            try {
                String adharCard = adharCardField.getText();
                PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM registrations WHERE adhar_card=?");
                pstmt.setString(1, adharCard);
                ResultSet rs = pstmt.executeQuery();
                StringBuilder result = new StringBuilder("AdharCard\tBirthYear\tMobileNo\tAgeGroup\tHospital\tVaccine\tTimeSlot\n");
                while (rs.next()) {
                    result.append(rs.getString("adhar_card")).append("\t").append(rs.getInt("birth_year")).append("\t").append(rs.getString("mobile_no")).append("\t")
                            .append(rs.getString("age_group")).append("\t").append(rs.getString("hospital")).append("\t").append(rs.getString("vaccine")).append("\t")
                            .append(rs.getString("time_slot")).append("\n");
                }
                if (result.length() > 0) {
                    JOptionPane.showMessageDialog(this, result.toString());
                } else {
                    JOptionPane.showMessageDialog(this, "Record with AdharCard " + adharCard + " not found", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Failed to search record: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        public static void main(String[] args) {
            // Set up database driver
            try {
                Class.forName("org.sqlite.JDBC");
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "SQLite JDBC Driver not found!", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }
    
            new CoWinRegistrationForm();
        }
    }
