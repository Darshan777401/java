import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TrafficLightSimulator extends JFrame implements ActionListener {
    private JLabel messageLabel;

    public TrafficLightSimulator() {
        setTitle("Traffic Light Simulator");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center the frame on the screen

        // Create radio buttons
        JRadioButton redButton = new JRadioButton("Red");
        JRadioButton yellowButton = new JRadioButton("Yellow");
        JRadioButton greenButton = new JRadioButton("Green");

        // Group the radio buttons
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(redButton);
        buttonGroup.add(yellowButton);
        buttonGroup.add(greenButton);

        // Add action listeners to the radio buttons
        redButton.addActionListener(this);
        yellowButton.addActionListener(this);
        greenButton.addActionListener(this);

        // Create message label
        messageLabel = new JLabel();
        messageLabel.setHorizontalAlignment(SwingConstants.CENTER);
        messageLabel.setFont(new Font("Arial", Font.BOLD, 20));

        // Add components to the frame
        JPanel radioPanel = new JPanel();
        radioPanel.setLayout(new GridLayout(3, 1));
        radioPanel.add(redButton);
        radioPanel.add(yellowButton);
        radioPanel.add(greenButton);

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(radioPanel, BorderLayout.CENTER);
        getContentPane().add(messageLabel, BorderLayout.NORTH);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String message = "";
        Color textColor = Color.BLACK;

        switch (e.getActionCommand()) {
            case "Red":
                message = "Stop";
                textColor = Color.RED;
                break;
            case "Yellow":
                message = "Ready";
                textColor = Color.YELLOW;
                break;
            case "Green":
                message = "Go";
                textColor = Color.GREEN;
                break;
        }

        messageLabel.setText(message);
        messageLabel.setForeground(textColor);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            TrafficLightSimulator frame = new TrafficLightSimulator();
            frame.setVisible(true);
        });
    }
}









import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class BallMovingThread extends JFrame {
    private JPanel ballPanel;
    private JButton startButton;
    private BallThread ballThread;

    public BallMovingThread() {
        setTitle("Ball Moving Thread");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center the frame on the screen

        // Create ball panel
        ballPanel = new JPanel() {
            private int ballY = 0; // Initial position of the ball

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.RED);
                g.fillOval(150, ballY, 50, 50); // Draw the ball
            }

            public void moveBall() {
                if (ballY <= getHeight()) {
                    ballY += 5; // Move the ball vertically
                    repaint(); // Repaint the panel to update the ball's position
                } else {
                    ballY = 0; // Reset the ball position when it reaches the bottom
                }
            }
        };

        // Create start button
        startButton = new JButton("Start");
        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (ballThread == null) {
                    ballThread = new BallThread(); // Create a new thread for moving the ball
                    ballThread.start(); // Start the thread
                }
            }
        });

        // Add components to the frame
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(ballPanel, BorderLayout.CENTER);
        getContentPane().add(startButton, BorderLayout.SOUTH);
    }

    // Thread class for moving the ball
    class BallThread extends Thread {
        @Override
        public void run() {
            while (true) {
                ballPanel.moveBall(); // Move the ball vertically
                try {
                    Thread.sleep(50); // Pause the thread for a short interval
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            BallMovingThread frame = new BallMovingThread();
            frame.setVisible(true);
        });
    }
}



import java.util.Scanner;

class Message {
    private String message;
    private boolean isNewMessage = false;

    // Method to set the message
    public synchronized void setMessage(String message) {
        // Wait until the previous message is consumed by the receiver
        while (isNewMessage) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        this.message = message;
        isNewMessage = true;
        notify(); // Notify the receiver thread that a new message is available
    }

    // Method to get the message
    public synchronized String getMessage() {
        // Wait until a new message is available
        while (!isNewMessage) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        isNewMessage = false;
        notify(); // Notify the sender thread that the message has been consumed
        return message;
    }
}

class SenderThread extends Thread {
    private Message message;

    public SenderThread(Message message) {
        this.message = message;
    }

    public void run() {
        Scanner scanner = new Scanner(System.in);
        String inputMessage;
        do {
            System.out.print("Enter message (type 'Good Bye Corona' to exit): ");
            inputMessage = scanner.nextLine();
            message.setMessage(inputMessage);
        } while (!inputMessage.equals("Good Bye Corona"));
        scanner.close();
    }
}

class ReceiverThread extends Thread {
    private Message message;

    public ReceiverThread(Message message) {
        this.message = message;
    }

    public void run() {
        String receivedMessage;
        do {
            receivedMessage = message.getMessage();
            System.out.println("Received message: " + receivedMessage);
        } while (!receivedMessage.equals("Good Bye Corona"));
    }
}

public class MessageSenderReceiver {
    public static void main(String[] args) {
        Message message = new Message();
        SenderThread senderThread = new SenderThread(message);
        ReceiverThread receiverThread = new ReceiverThread(message);

        senderThread.start();
        receiverThread.start();
    }
}


